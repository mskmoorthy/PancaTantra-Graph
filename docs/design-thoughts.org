* Use Cases

This section enumerates the use-cases for which we want to generate
graphs. These should guide the data representation we choose.  The
goal is to generate multiple visualizations of the same data source.

* System Design

  - Pick a declarative representation for the story facts we
    capture. (CSV) at present.
  - Representation should be independent of visual artifacts needed to
    draw graphs.
  - CSV data captures metadata.
  - Design data structures  (Python Classes) to hold this
    data. Character, Story (classes.py)
  - Instantiate objects by reading in CSV files. entities.py
  - Generate desired graphs from Python code that loads the data, then
    calls graphviz through the Python  API.  graph.py
  - Continuously validate data via utils in utils.py.
  - Produce PDF files using the various graphviz layout engines. Makefile
  - In effect, small Python programs produce any given graph-view of
    what is in the data.

    

* Modules 

  - classes.py :: Defines Character, Stories 
  - entities.py ::  Instantiates  --- Character, Story, ... from CSV data.
  - graph.py  ::  Use pygraphviz API to draw graph for book-1
  - utils.py ::  Various data checkers 


*  Data Files

  - cast-1.csv :: Cast Of characters in Book-1
  - book-1.csv  ::  Stories from book-1.
* Resources 

  - [[http://www.columbia.edu/itc/mealac/pritchett/00litlinks/panchatantra_ryder/index.html#book1][Panchatantra Columbia Press]]
  - [[https://www.gutenberg.org/files/25545/25545-h/25545-h.htm][Gutenberg: Children's Literature]]
  - [[https://archive.org/stream/Panchatantra_Arthur_W_Ryder/Panchatantra%20-%20Arthur%20W%20Ryder_djvu.txt][Internet Archive: Panchatantra: Arthur Ryder]]
  - [[https://www.amazon.com/Books-Narindar-Uberoi-Kelly/s?rh=n%3A283155%2Cp_27%3ANarindar+Uberoi+Kelly][Panchatantra]]


