* Use Cases

This section enumerates the use-cases for which we want to generate
graphs. These should guide the data representation we choose.  The
goal is to generate multiple visualizations of the same data source.

* System Design

  - Pick a declarative representation for the story facts we
    capture. (CSV) at present.
  - Representation should be independent of visual artifacts needed to
    draw graphs.
  - CSV data captures metadata.
  - Design data structures  (Python Classes) to hold this
    data. Character, Story (classes.py)
  - Instantiate objects by reading in CSV files. entities.py
  - Generate desired graphs from Python code that loads the data, then
    calls graphviz through the Python  API.  graph.py
  - Continuously validate data via utils in utils.py.
  - Produce PDF files using the various graphviz layout engines. Makefile
  - In effect, small Python programs produce any given graph-view of
    what is in the data.

    

* Modules 

  - classes.py :: Defines Character, Stories 
  - entities.py ::  Instantiates  --- Character, Story, ... from CSV data.
  - graph.py  ::  Use pygraphviz API to draw graph for book-1
  - utils.py ::  Various data checkers 


*  Data Files

  - cast-1.csv :: Cast Of characters in Book-1
  - book-1.csv  ::  Stories from book-1.


* Lessons Learned 

  - Graphviz layout engines generate different perspectives on the
  same graph structure.
  - The graph produced by _graph.py_ can answer many types of
    questions about the structure and relationships among the
    stories in the Panchatantra at a glance.


**  Panchatantra Insights At A Glance From The Graph 

  - Node colors help quickly locate  main characters.
  - Primary colors for Rusty, Lively, Crafty and Cautious draw the  eye.
  - Primary edges are colored in the color of the character who narrates
    a given  story.
  - Rusty narrates no stories, as is evident from the absence of *red* edges.
  - In-degree and out-degree of edges of a specific color at a node
    reveals stories told-by or told-to a given character.
  - Edges from Title nodes to Moral nodes highlights insights for each story.
  - Nested stories are grouped as children of the containing story.
  - Fill-style distinguishes Title nodes from Moral nodes.
  - The underlying semantics present in the structure of the book is
    conveyed to Graphviz via subgraphs with appropriate ~rank~ values
    e.g. _rank=source_ to influce the order in which nodes are laid out.
  - Notice the call to _unflatten_ in graph.py to create more space
    between the nodes for clarity.


* Resources 
  - [[https://graphviz.org/documentation/][Graphviz Manual]]
  - [[https://pygraphviz.github.io/documentation/stable/pygraphviz.pdf][PyGraphviz Manual]]
  - [[http://www.columbia.edu/itc/mealac/pritchett/00litlinks/panchatantra_ryder/index.html#book1][Panchatantra Columbia Press]]
  - [[https://www.gutenberg.org/files/25545/25545-h/25545-h.htm][Gutenberg: Children's Literature]]
  - [[https://archive.org/stream/Panchatantra_Arthur_W_Ryder/Panchatantra%20-%20Arthur%20W%20Ryder_djvu.txt][Internet Archive: Panchatantra: Arthur Ryder]]
  - [[https://www.amazon.com/Books-Narindar-Uberoi-Kelly/s?rh=n%3A283155%2Cp_27%3ANarindar+Uberoi+Kelly][Panchatantra]]
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:nil todo:t |:t
#+title: Design: Graphatantra
#+date: <2022-03-31 Thu>
#+author: T.V Raman
#+email: raman@google.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.0.50 (Org mode 9.5.2)
#+cite_export:


